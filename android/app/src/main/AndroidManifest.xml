```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme"
        android:usesCleartextTraffic="true"
        android:networkSecurityConfig="@xml/network_security_config">

        <activity
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode|navigation"
            android:name=".MainActivity"
            android:label="@string/title_activity_main"
            android:theme="@style/AppTheme.NoActionBarLaunch"
            android:launchMode="singleTask"
            android:exported="true"
            android:screenOrientation="landscape">

            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
                <!-- Add TV support -->
                <category android:name="android.intent.category.LEANBACK_LAUNCHER" />
            </intent-filter>

        </activity>

        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="${applicationId}.fileprovider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths"></meta-data>
        </provider>
    </application>

    <!-- Fire TV Stick / Android TV Support -->
    <uses-feature android:name="android.software.leanback" android:required="false" />
    <uses-feature android:name="android.hardware.touchscreen" android:required="false" />

    <!-- Permissions -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />
</manifest>
```

## File: frontend/android/app/src/main/res/xml/network_security_config.xml

```xml
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">localhost</domain>
        <domain includeSubdomains="true">10.0.0.0/8</domain>
        <domain includeSubdomains="true">192.168.0.0/16</domain>
        <domain includeSubdomains="true">172.16.0.0/12</domain>
    </domain-config>
    <base-config cleartextTrafficPermitted="true">
        <trust-anchors>
            <certificates src="system"/>
        </trust-anchors>
    </base-config>
</network-security-config>
```

## File: frontend/.env

```env
# Backend URL - Update this based on your deployment
REACT_APP_BACKEND_URL=http://localhost:8001

# App Configuration
REACT_APP_NAME=Netflix IPTV
REACT_APP_VERSION=1.0.0

# Development Configuration
REACT_APP_DEBUG=true
```

## File: frontend/public/index.html

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Netflix IPTV - Stream live TV channels and on-demand content"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    
    <!-- Preconnect to common domains for better performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Import Inter font for modern look -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <title>Netflix IPTV</title>
    
    <style>
      /* Prevent flash of unstyled content */
      html {
        background-color: #000000;
      }
      
      /* Loading screen */
      #initial-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #000000;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
      }
      
      .loader-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #333;
        border-top: 3px solid #e50914;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      /* Hide loader when React loads */
      .app-loaded #initial-loader {
        display: none;
      }
    </style>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    
    <!-- Initial loading screen -->
    <div id="initial-loader">
      <div class="loader-spinner"></div>
    </div>
    
    <div id="root"></div>
    
    <script>
      // Remove loader when React app loads
      window.addEventListener('load', function() {
        setTimeout(function() {
          document.body.classList.add('app-loaded');
        }, 500);
      });
    </script>
  </body>
</html>
```

## File: contracts.md

```markdown
# API Contracts for Netflix IPTV

## Authentication Endpoints

### POST /api/auth/register
Register a new user

**Request:**
```json
{
  "email": "user@example.com",
  "password": "password123",
  "name": "User Name"
}
```

**Response:**
```json
{
  "success": true,
  "message": "User registered successfully",
  "data": {
    "user_id": "uuid",
    "token": "jwt_token"
  }
}
```

### POST /api/auth/login
Authenticate user

**Request:**
```json
{
  "email": "user@example.com",
  "password": "password123"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "token": "jwt_token",
    "user": {
      "id": "uuid",
      "email": "user@example.com",
      "name": "User Name"
    }
  }
}
```

## IPTV Management

### POST /api/iptv/accounts
Add new IPTV account

**Request:**
```json
{
  "name": "My IPTV Provider",
  "url": "http://provider.com/playlist.m3u",
  "username": "username",
  "password": "password"
}
```

**Response:**
```json
{
  "success": true,
  "message": "IPTV account connected successfully. Found 500 channels.",
  "data": {
    "account": {
      "id": "uuid",
      "name": "My IPTV Provider",
      "status": "connected",
      "channels_count": 500
    }
  }
}
```

### GET /api/iptv/accounts
Get user's IPTV accounts

**Response:**
```json
[
  {
    "id": "uuid",
    "name": "My IPTV Provider",
    "url": "http://provider.com/playlist.m3u",
    "status": "connected",
    "channels_count": 500,
    "last_connected": "2024-01-01T00:00:00Z"
  }
]
```

## Channels & Programs

### GET /api/channels/{account_id}
Get channels for IPTV account

**Query Parameters:**
- `category` (optional): Filter by category

**Response:**
```json
[
  {
    "id": "uuid",
    "name": "Channel Name",
    "logo": "http://example.com/logo.png",
    "category": "News",
    "stream_url": "http://stream.url/channel",
    "epg_id": "channel.epg.id"
  }
]
```

### GET /api/programs/{channel_id}
Get program guide for channel

**Query Parameters:**
- `date` (optional): Filter by date (ISO format)

**Response:**
```json
[
  {
    "id": "uuid",
    "title": "Program Title",
    "description": "Program description",
    "start_time": "2024-01-01T20:00:00Z",
    "end_time": "2024-01-01T21:00:00Z",
    "category": "Drama"
  }
]
```

## Content (Movies/TV Shows)

### GET /api/content/featured
Get featured content

**Response:**
```json
{
  "success": true,
  "data": {
    "featured": [
      {
        "id": "tmdb_id",
        "title": "Movie Title",
        "description": "Movie description",
        "image": "poster_url",
        "backdrop": "backdrop_url",
        "year": 2024,
        "rating": 8.5,
        "type": "movie",
        "trailer_url": "youtube_url"
      }
    ]
  }
}
```

### GET /api/content/rows
Get content organized in rows

**Response:**
```json
{
  "success": true,
  "data": {
    "rows": [
      {
        "title": "Trending Now",
        "contents": [
          {
            "id": "tmdb_id",
            "title": "Content Title",
            "image": "poster_url",
            "year": 2024,
            "rating": 8.0,
            "type": "movie"
          }
        ]
      }
    ]
  }
}
```

## Error Responses

All endpoints may return error responses in this format:

```json
{
  "success": false,
  "message": "Error description",
  "error_code": "ERROR_CODE"
}
```

**Common Error Codes:**
- `INVALID_CREDENTIALS` - Authentication failed
- `ACCOUNT_NOT_FOUND` - IPTV account not found
- `CONNECTION_FAILED` - Failed to connect to IPTV service
- `INVALID_REQUEST` - Request validation failed
- `INTERNAL_ERROR` - Server error

## Headers

All authenticated requests should include:
```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```
```
